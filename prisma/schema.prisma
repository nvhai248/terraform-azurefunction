generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id
  dateOfBirth    DateTime?
  gender         String?  
  phoneNumber    String?
  avatarUrl      String?

  // Health & fitness metrics
  height         Float?    // in cm
  weight         Float?    // latest weight in kg
  targetWeight   Float?    // user goal
  bmi            Float?    // can be computed, but can store for history
  activityLevel  String?   // sedentary, moderate, active
  allergies      String[]  // e.g. ["peanut", "shellfish"]
  medicalHistory String?   // optional notes

  // Nutrition preferences
  dietaryPreference String?   // vegan, vegetarian, keto, etc.
  dailyCalorieGoal  Int?      // calories per day target

  // Relationships
  meals        Meal[]       // uploaded food & calorie analysis
  weightLogs   WeightLog[]  // track weight over time
  activities   Activity[]   // workouts / steps etc.

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Meal {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  imageUrl    String   // uploaded food image
  description String?  // e.g. "Chicken rice"
  calories    Int?     // detected or estimated
  protein     Float?   // grams
  fat         Float?   // grams
  carbs       Float?   // grams
  detectedAt  DateTime @default(now())
}

model WeightLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  weight    Float    // kg
  loggedAt  DateTime @default(now())
}

model Activity {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  type        String   // e.g. "running", "cycling"
  durationMin Int?     // duration in minutes
  calories    Int?     // calories burned
  loggedAt    DateTime @default(now())
}
